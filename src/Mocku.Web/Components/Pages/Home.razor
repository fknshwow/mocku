@page "/"
@using Mocku.Web.Services
@using Mocku.Web.Models
@using System.Text.Json
@inject MockApiService MockApiService
@inject MockFileService MockFileService
@inject ILogger<Home> Logger
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Mocku - Mock API Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Mock API Management</h1>
                <div>
                    @if (isAutoRefreshEnabled)
                    {
                        <span class="badge bg-success me-2">
                            <i class="bi bi-arrow-repeat"></i> Auto-refresh ON
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary me-2">
                            <i class="bi bi-pause"></i> Auto-refresh OFF
                        </span>
                    }
                    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="ToggleAutoRefresh">
                        @if (isAutoRefreshEnabled)
                        {
                            <text><i class="bi bi-pause"></i> Disable Auto Refresh</text>
                        }
                        else
                        {
                            <text><i class="bi bi-play"></i> Enable Auto Refresh</text>
                        }
                    </button>
                    <button class="btn btn-success me-2" @onclick="ShowCreateFileModal">
                        <i class="bi bi-plus-circle"></i> New Mock File
                    </button>
                    <button class="btn btn-primary" @onclick="RefreshMockDefinitions" disabled="@isRefreshing">
                        @if (isRefreshing)
                        {
                            <text><i class="bi bi-arrow-clockwise spin"></i> Refreshing...</text>
                        }
                        else
                        {
                            <text><i class="bi bi-arrow-clockwise"></i> Refresh Now</text>
                        }
                    </button>
                </div>
            </div>

            <!-- Tab Navigation -->
            <ul class="nav nav-tabs" id="mockTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "endpoints" ? "active" : "")" 
                            @onclick='() => SetActiveTab("endpoints")' 
                            type="button">
                        <i class="bi bi-list-ul"></i> Active Endpoints
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "files" ? "active" : "")" 
                            @onclick='() => SetActiveTab("files")' 
                            type="button">
                        <i class="bi bi-file-earmark-text"></i> Mock Files
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "docs" ? "active" : "")" 
                            @onclick='() => SetActiveTab("docs")' 
                            type="button">
                        <i class="bi bi-book"></i> Documentation
                    </button>
                </li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-content mt-3">
                
                <!-- Endpoints Tab -->
                @if (activeTab == "endpoints")
                {
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                Active Mock Endpoints 
                                <small class="text-muted">Last updated: @lastUpdated.ToString("HH:mm:ss")</small>
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (mockDefinitions.Any())
                            {
                                <div class="alert alert-success">
                                    <strong>@mockDefinitions.Count</strong> mock endpoint(s) loaded successfully from <code>@MockApiService.GetMocksDirectory()</code>
                                </div>
                                
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Method</th>
                                                <th>Path</th>
                                                <th>Status Code</th>
                                                <th>Content Type</th>
                                                <th>Delay (ms)</th>
                                                <th>Headers</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var mock in mockDefinitions)
                                            {
                                                <tr>
                                                    <td>
                                                        <span class="badge bg-@GetMethodBadgeColor(mock.Method)">@mock.Method</span>
                                                    </td>
                                                    <td>
                                                        <code>@mock.Path</code>
                                                        @if (mock.HasWildcards)
                                                        {
                                                            <span class="badge bg-info ms-1" title="Supports wildcard parameters">
                                                                <i class="bi bi-asterisk"></i>
                                                            </span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-@GetStatusBadgeColor(mock.StatusCode)">@mock.StatusCode</span>
                                                    </td>
                                                    <td>@(mock.ContentType ?? "application/json")</td>
                                                    <td>@mock.DelayMs</td>
                                                    <td>
                                                        @if (mock.ResponseHeaders.Any())
                                                        {
                                                            <small>
                                                                @foreach (var header in mock.ResponseHeaders)
                                                                {
                                                                    <div><code>@header.Key: @header.Value</code></div>
                                                                }
                                                            </small>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">None</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (mock.HasWildcards)
                                                        {
                                                            <button class="btn btn-sm btn-outline-secondary" disabled title="Cannot test wildcard endpoints directly">
                                                                <i class="bi bi-asterisk"></i> Wildcard
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <a href="@mock.Path" target="_blank" class="btn btn-sm btn-outline-primary">
                                                                <i class="bi bi-box-arrow-up-right"></i> Test
                                                            </a>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    <h6><i class="bi bi-exclamation-triangle"></i> No mock definitions found</h6>
                                    <p>Create JSON files in the <code>mocks</code> directory to define mock API endpoints.</p>
                                    <p class="mb-0">Current mocks directory: <code>@MockApiService.GetMocksDirectory()</code></p>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Files Tab -->
                @if (activeTab == "files")
                {
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">Mock Files</h5>
                            <button class="btn btn-success btn-sm" @onclick="ShowCreateFileModal">
                                <i class="bi bi-plus-circle"></i> New File
                            </button>
                        </div>
                        <div class="card-body">
                            @if (mockFiles.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>File Name</th>
                                                <th>Status</th>
                                                <th>Endpoint</th>
                                                <th>Method</th>
                                                <th>Last Modified</th>
                                                <th>Size</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var file in mockFiles)
                                            {
                                                <tr>
                                                    <td>
                                                        <i class="bi bi-file-earmark-text me-2"></i>
                                                        <code>@file.FileName</code>
                                                    </td>
                                                    <td>
                                                        @if (file.IsValid)
                                                        {
                                                            <span class="badge bg-success">Valid</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-danger" title="@file.Error">Invalid</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (file.MockDefinition != null)
                                                        {
                                                            <code>@file.MockDefinition.Path</code>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (file.MockDefinition != null)
                                                        {
                                                            <span class="badge bg-@GetMethodBadgeColor(file.MockDefinition.Method)">@file.MockDefinition.Method</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td>@file.LastModified.ToString("yyyy-MM-dd HH:mm")</td>
                                                    <td>@FormatFileSize(file.Size)</td>
                                                    <td>
                                                        <div class="btn-group btn-group-sm">
                                                            <button class="btn btn-outline-primary" @onclick="() => EditFile(file.FileName)" title="Edit">
                                                                <i class="bi bi-pencil"></i>
                                                            </button>
                                                            <button class="btn btn-outline-danger" @onclick="() => ShowDeleteConfirm(file.FileName)" title="Delete">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    <h6><i class="bi bi-info-circle"></i> No mock files found</h6>
                                    <p class="mb-0">Click "New File" to create your first mock definition.</p>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Documentation Tab -->
                @if (activeTab == "docs")
                {
                    <_Documentation />
                }
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit File Modal -->
@if (showFileModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (isEditMode)
                        {
                            <i class="bi bi-pencil"></i> <text>Edit Mock File: @currentFileName</text>
                        }
                        else
                        {
                            <i class="bi bi-plus-circle"></i> <text>Create New Mock File</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseFileModal"></button>
                </div>
                <div class="modal-body">
                    <form @onsubmit:preventDefault="true">
                        @if (!isEditMode)
                        {
                            <div class="mb-3">
                                <label class="form-label">File Name</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" @bind="currentFileName" placeholder="my-mock-file" />
                                    <span class="input-group-text">.json</span>
                                </div>
                                <div class="form-text">Use descriptive names like 'get-users', 'post-login', etc.</div>
                            </div>
                        }
                        
                        <div class="mb-3">
                            <label class="form-label">JSON Content</label>
                            <textarea class="form-control font-monospace" 
                                      @bind="currentFileContent" 
                                      rows="20" 
                                      placeholder="Enter JSON mock definition..."></textarea>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(validationError))
                        {
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-triangle"></i>
                                <strong>Validation Error:</strong> @validationError
                            </div>
                        }
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseFileModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveFile" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="bi bi-save"></i> Save
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-trash text-danger"></i> Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the file <strong>@fileToDelete</strong>?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteFile" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<MockApiDefinition> mockDefinitions = new();
    private List<MockFileInfo> mockFiles = new();
    private DateTime lastUpdated = DateTime.Now;
    private bool isAutoRefreshEnabled = true;
    private bool isRefreshing = false;
    private bool isComponentDisposed = false;
    private string activeTab = "endpoints";

    // File management
    private bool showFileModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private bool isDeleting = false;
    private string currentFileName = "";
    private string currentFileContent = "";
    private string fileToDelete = "";
    private string validationError = "";

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to changes
        MockApiService.MockDefinitionsChanged += OnMockDefinitionsChanged;
        await RefreshMockDefinitionsAsync();
        await RefreshMockFilesAsync();
    }

    private async void OnMockDefinitionsChanged()
    {
        if (!isComponentDisposed && isAutoRefreshEnabled)
        {
            try
            {
                await InvokeAsync(async () =>
                {
                    await RefreshMockDefinitionsAsync();
                    await RefreshMockFilesAsync();
                    StateHasChanged();
                });
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error handling mock definitions changed event");
            }
        }
    }

    private async Task RefreshMockDefinitionsAsync()
    {
        if (isRefreshing) return;
        
        try
        {
            isRefreshing = true;
            StateHasChanged();
            
            // Add a small delay to make the refresh visible
            await Task.Delay(100);
            
            mockDefinitions = MockApiService.GetAllMockDefinitions().ToList();
            lastUpdated = DateTime.Now;
            Logger.LogInformation("Refreshed mock definitions, found {Count} definitions", mockDefinitions.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing mock definitions");
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task RefreshMockFilesAsync()
    {
        try
        {
            mockFiles = await MockFileService.GetAllMockFilesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing mock files");
        }
    }

    private async Task RefreshMockDefinitions()
    {
        await RefreshMockDefinitionsAsync();
        await RefreshMockFilesAsync();
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private void ToggleAutoRefresh()
    {
        isAutoRefreshEnabled = !isAutoRefreshEnabled;
        Logger.LogInformation("Auto-refresh {Status}", isAutoRefreshEnabled ? "enabled" : "disabled");
        StateHasChanged();
    }

    // File Management Methods
    private void ShowCreateFileModal()
    {
        isEditMode = false;
        currentFileName = "";
        currentFileContent = MockFileService.GetDefaultMockTemplate();
        validationError = "";
        showFileModal = true;
        StateHasChanged();
    }

    private void CloseFileModal()
    {
        showFileModal = false;
        StateHasChanged();
    }

    private async Task SaveFile()
    {
        if (string.IsNullOrWhiteSpace(currentFileName) || string.IsNullOrWhiteSpace(currentFileContent))
        {
            validationError = "File name and content cannot be empty.";
            StateHasChanged();
            return;
        }

        try
        {
            isSaving = true;
            StateHasChanged();

            // Perform save operation
            if (isEditMode)
            {
                // Update existing file
                await MockFileService.UpdateMockFileAsync(currentFileName, currentFileContent);
                Logger.LogInformation("Mock file updated: {FileName}", currentFileName);
            }
            else
            {
                // Create new file
                await MockFileService.CreateMockFileAsync(currentFileName, currentFileContent);
                Logger.LogInformation("Mock file created: {FileName}", currentFileName);
            }

            // Refresh file list
            await RefreshMockFilesAsync();

            // Close modal
            showFileModal = false;
        }
        catch (Exception ex)
        {
            validationError = "Error saving file: " + ex.Message;
            Logger.LogError(ex, "Error saving mock file");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task EditFile(string fileName)
    {
        try
        {
            var fileInfo = await MockFileService.GetMockFileAsync(fileName);
            if (fileInfo != null)
            {
                isEditMode = true;
                currentFileName = fileName;
                currentFileContent = fileInfo.Content;
                validationError = "";
                showFileModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading file for editing: {FileName}", fileName);
        }
    }

    private void ShowDeleteConfirm(string fileName)
    {
        fileToDelete = fileName;
        showDeleteModal = true;
        StateHasChanged();
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        fileToDelete = "";
        StateHasChanged();
    }

    private async Task DeleteFile()
    {
        try
        {
            isDeleting = true;
            StateHasChanged();

            var success = await MockFileService.DeleteMockFileAsync(fileToDelete);
            if (success)
            {
                await RefreshMockDefinitionsAsync();
                await RefreshMockFilesAsync();
                CloseDeleteModal();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting file: {FileName}", fileToDelete);
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }

    // Utility Methods
    private string GetMethodBadgeColor(string method) => method.ToUpper() switch
    {
        "GET" => "primary",
        "POST" => "success",
        "PUT" => "warning",
        "DELETE" => "danger",
        "PATCH" => "info",
        _ => "secondary"
    };

    private string GetStatusBadgeColor(int statusCode) => statusCode switch
    {
        >= 200 and < 300 => "success",
        >= 300 and < 400 => "info",
        >= 400 and < 500 => "warning",
        >= 500 => "danger",
        _ => "secondary"
    };

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        return $"{bytes / (1024 * 1024):F1} MB";
    }

    public void Dispose()
    {
        isComponentDisposed = true;
        // Unsubscribe from events to prevent memory leaks
        MockApiService.MockDefinitionsChanged -= OnMockDefinitionsChanged;
    }
}
