@page "/"
@using Mocku.Web.Services
@using Mocku.Web.Models
@using System.Text.Json
@using System.IO
@using System.Text.RegularExpressions
@inject MockApiService MockApiService
@inject MockFileService MockFileService
@inject RequestLogService RequestLogService
@inject RequestGeneratorService RequestGeneratorService
@inject IJSRuntime JSRuntime
@inject ILogger<Home> Logger
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Mocku - Mock API Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Mock API Management</h1>
                <div>
                    @if (isAutoRefreshEnabled)
                    {
                        <span class="badge bg-success me-2">
                            <i class="bi bi-arrow-repeat"></i> Auto-refresh ON
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary me-2">
                            <i class="bi bi-pause"></i> Auto-refresh OFF
                        </span>
                    }
                    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="ToggleAutoRefresh">
                        @if (isAutoRefreshEnabled)
                        {
                            <text><i class="bi bi-pause"></i> Disable Auto Refresh</text>
                        }
                        else
                        {
                            <text><i class="bi bi-play"></i> Enable Auto Refresh</text>
                        }
                    </button>
                    <button class="btn btn-success me-2" @onclick="ShowCreateFileModal">
                        <i class="bi bi-plus-circle"></i> New Mock File
                    </button>
                    <button class="btn btn-primary" @onclick="RefreshMockDefinitions" disabled="@isRefreshing">
                        @if (isRefreshing)
                        {
                            <text><i class="bi bi-arrow-clockwise spin"></i> Refreshing...</text>
                        }
                        else
                        {
                            <text><i class="bi bi-arrow-clockwise"></i> Refresh Now</text>
                        }
                    </button>
                </div>
            </div>

            <!-- Tab Navigation -->
            <ul class="nav nav-tabs" id="mockTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "endpoints" ? "active" : "")" 
                            @onclick='() => SetActiveTab("endpoints")' 
                            type="button">
                        <i class="bi bi-list-ul"></i> Active Endpoints
                        @if (mockDefinitions.Any())
                        {
                            <span class="badge bg-success ms-1">@mockDefinitions.Count</span>
                        }
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "files" ? "active" : "")" 
                            @onclick='() => SetActiveTab("files")' 
                            type="button">
                        <i class="bi bi-file-earmark-text"></i> Mock Files
                        @if (mockFiles.Any())
                        {
                            <span class="badge bg-info ms-1">@mockFiles.Count</span>
                        }
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "docs" ? "active" : "")" 
                            @onclick='() => SetActiveTab("docs")' 
                            type="button">
                        <i class="bi bi-book"></i> Documentation
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "logs" ? "active" : "")" 
                            @onclick='() => SetActiveTab("logs")' 
                            type="button">
                        <i class="bi bi-list-columns"></i> Request Logs
                        @if (requestLogs.Any())
                        {
                            <span class="badge bg-primary ms-1">@requestLogs.Count</span>
                        }
                    </button>
                </li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-content mt-3">
                
                <!-- Endpoints Tab -->
                @if (activeTab == "endpoints")
                {
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                Active Mock Endpoints 
                                <small class="text-muted">Last updated: @lastUpdated.ToString("HH:mm:ss")</small>
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (mockDefinitions.Any())
                            {
                                <!-- Search Bar -->
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <span class="input-group-text">
                                                <i class="bi bi-search"></i>
                                            </span>
                                            <input type="text" 
                                                   class="form-control" 
                                                   placeholder="Search endpoints by path, method, status code, or content type..." 
                                                   @bind="endpointSearchTerm" 
                                                   @oninput="OnEndpointSearchInput" />
                                            @if (!string.IsNullOrWhiteSpace(endpointSearchTerm))
                                            {
                                                <button class="btn btn-outline-secondary" type="button" @onclick="ClearEndpointSearch">
                                                    <i class="bi bi-x"></i>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-md-6 d-flex align-items-center">
                                        @{
                                            var filteredEndpoints = GetSortedEndpoints();
                                        }
                                        @if (!string.IsNullOrWhiteSpace(endpointSearchTerm))
                                        {
                                            <small class="text-muted">
                                                Showing @filteredEndpoints.Count of @mockDefinitions.Count endpoints
                                            </small>
                                        }
                                    </div>
                                </div>
                                
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th @onclick='() => SortEndpoints("method")' class="sortable-header">
                                                    Method
                                                    @if (currentSortColumn == "method")
                                                    {
                                                        <span class="sort-indicator ms-1">@(isAscending ? "?" : "?")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="sort-indicator ms-1 text-muted">?</span>
                                                    }
                                                </th>
                                                <th @onclick='() => SortEndpoints("path")' class="sortable-header">
                                                    Path
                                                    @if (currentSortColumn == "path")
                                                    {
                                                        <span class="sort-indicator ms-1">@(isAscending ? "?" : "?")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="sort-indicator ms-1 text-muted">?</span>
                                                    }
                                                </th>
                                                <th @onclick='() => SortEndpoints("statusCode")' class="sortable-header">
                                                    Status Code
                                                    @if (currentSortColumn == "statusCode")
                                                    {
                                                        <span class="sort-indicator ms-1">@(isAscending ? "?" : "?")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="sort-indicator ms-1 text-muted">?</span>
                                                    }
                                                </th>
                                                <th @onclick='() => SortEndpoints("contentType")' class="sortable-header">
                                                    Content Type
                                                    @if (currentSortColumn == "contentType")
                                                    {
                                                        <span class="sort-indicator ms-1">@(isAscending ? "?" : "?")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="sort-indicator ms-1 text-muted">?</span>
                                                    }
                                                </th>
                                                <th @onclick='() => SortEndpoints("delay")' class="sortable-header">
                                                    Delay (ms)
                                                    @if (currentSortColumn == "delay")
                                                    {
                                                        <span class="sort-indicator ms-1">@(isAscending ? "?" : "?")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="sort-indicator ms-1 text-muted">?</span>
                                                    }
                                                </th>
                                                <th @onclick='() => SortEndpoints("headers")' class="sortable-header">
                                                    Headers
                                                    @if (currentSortColumn == "headers")
                                                    {
                                                        <span class="sort-indicator ms-1">@(isAscending ? "?" : "?")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="sort-indicator ms-1 text-muted">?</span>
                                                    }
                                                </th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (filteredEndpoints.Any())
                                            {
                                                @foreach (var mock in filteredEndpoints)
                                                {
                                                    <tr>
                                                        <td>
                                                            <span class="badge bg-@GetMethodBadgeColor(mock.Method)">@mock.Method</span>
                                                        </td>
                                                        <td>
                                                            <code class="endpoint-path">@mock.Path</code>
                                                            @if (mock.HasWildcards)
                                                            {
                                                                <span class="badge bg-info ms-1" title="Supports wildcard parameters">
                                                                    <i class="bi bi-asterisk"></i>
                                                                </span>
                                                            }
                                                        </td>
                                                        <td>
                                                            <span class="badge bg-@GetStatusBadgeColor(mock.StatusCode)">@mock.StatusCode</span>
                                                        </td>
                                                        <td>@(mock.ContentType ?? "application/json")</td>
                                                        <td>@mock.DelayMs</td>
                                                        <td>
                                                            @if (mock.ResponseHeaders.Any())
                                                            {
                                                                <small>
                                                                    @foreach (var header in mock.ResponseHeaders)
                                                                    {
                                                                        <div><code>@header.Key: @header.Value</code></div>
                                                                    }
                                                                </small>
                                                            }
                                                            else
                                                            {
                                                                <span class="text-muted">None</span>
                                                            }
                                                        </td>
                                                        <td>
                                                            <div class="btn-group btn-group-sm">
                                                                @if (mock.HasWildcards)
                                                                {
                                                                    <button class="btn btn-outline-secondary" disabled title="Cannot test wildcard endpoints directly">
                                                                        <i class="bi bi-asterisk"></i> Wildcard
                                                                    </button>
                                                                }
                                                                else
                                                                {
                                                                    <a href="@mock.Path" target="_blank" class="btn btn-outline-primary" title="Test in browser">
                                                                        <i class="bi bi-box-arrow-up-right"></i> Test
                                                                    </a>
                                                                }
                                                                <button class="btn btn-outline-info" @onclick="() => ShowSampleRequestModal(mock)" title="Generate sample request">
                                                                    <i class="bi bi-code-slash"></i> Sample
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="7" class="text-center text-muted py-4">
                                                        <i class="bi bi-search me-2"></i>
                                                        No endpoints match your search criteria.
                                                        @if (!string.IsNullOrWhiteSpace(endpointSearchTerm))
                                                        {
                                                            <button class="btn btn-link btn-sm p-0 ms-2" @onclick="ClearEndpointSearch">
                                                                Clear search
                                                            </button>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    <h6><i class="bi bi-exclamation-triangle"></i> No mock definitions found</h6>
                                    <p>Create JSON files in the <code>mocks</code> directory to define mock API endpoints.</p>
                                    <p class="mb-0">Current mocks directory: <code>@MockApiService.GetMocksDirectory()</code></p>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Files Tab -->
                @if (activeTab == "files")
                {
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">Mock Files</h5>
                            <button class="btn btn-success btn-sm" @onclick="ShowCreateFileModal">
                                <i class="bi bi-plus-circle"></i> New File
                            </button>
                        </div>
                        <div class="card-body">
                            @if (mockFiles.Any())
                            {
                                <!-- Search Bar -->
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <div class="input-group">
                                            <span class="input-group-text">
                                                <i class="bi bi-search"></i>
                                            </span>
                                            <input type="text" 
                                                   class="form-control" 
                                                   placeholder="Search files by name, endpoint path, or method..." 
                                                   @bind="fileSearchTerm" 
                                                   @oninput="OnFileSearchInput" />
                                            @if (!string.IsNullOrWhiteSpace(fileSearchTerm))
                                            {
                                                <button class="btn btn-outline-secondary" type="button" @onclick="ClearFileSearch">
                                                    <i class="bi bi-x"></i>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-md-6 d-flex align-items-center">
                                        @{
                                            var filteredFiles = GetFilteredFiles();
                                        }
                                        @if (!string.IsNullOrWhiteSpace(fileSearchTerm))
                                        {
                                            <small class="text-muted">
                                                Showing @filteredFiles.Count of @mockFiles.Count files
                                            </small>
                                        }
                                    </div>
                                </div>

                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>File Name</th>
                                                <th>Status</th>
                                                <th>Endpoint</th>
                                                <th>Method</th>
                                                <th>Last Modified</th>
                                                <th>Size</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (filteredFiles.Any())
                                            {
                                                @foreach (var file in filteredFiles)
                                                {
                                                    <tr>
                                                        <td>
                                                            <i class="bi bi-file-earmark-text me-2"></i>
                                                            <code>@file.FileName</code>
                                                        </td>
                                                        <td>
                                                            @if (file.IsValid)
                                                            {
                                                                <span class="badge bg-success">Valid</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-danger" title="@file.Error">Invalid</span>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (file.MockDefinition != null)
                                                            {
                                                                <code>@file.MockDefinition.Path</code>
                                                            }
                                                            else
                                                            {
                                                                <span class="text-muted">-</span>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (file.MockDefinition != null)
                                                            {
                                                                <span class="badge bg-@GetMethodBadgeColor(file.MockDefinition.Method)">@file.MockDefinition.Method</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="text-muted">-</span>
                                                            }
                                                        </td>
                                                        <td>@file.LastModified.ToString("yyyy-MM-dd HH:mm")</td>
                                                        <td>@FormatFileSize(file.Size)</td>
                                                        <td>
                                                            <div class="btn-group btn-group-sm">
                                                                <button class="btn btn-outline-primary" @onclick="() => EditFile(file.FileName)" title="Edit">
                                                                    <i class="bi bi-pencil"></i>
                                                                </button>
                                                                <button class="btn btn-outline-danger" @onclick="() => ShowDeleteConfirm(file.FileName)" title="Delete">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="7" class="text-center text-muted py-4">
                                                        <i class="bi bi-search me-2"></i>
                                                        No files match your search criteria.
                                                        @if (!string.IsNullOrWhiteSpace(fileSearchTerm))
                                                        {
                                                            <button class="btn btn-link btn-sm p-0 ms-2" @onclick="ClearFileSearch">
                                                                Clear search
                                                            </button>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    <h6><i class="bi bi-info-circle"></i> No mock files found</h6>
                                    <p class="mb-0">Click "New File" to create your first mock definition.</p>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Documentation Tab -->
                @if (activeTab == "docs")
                {
                    <_Documentation />
                }

                <!-- Logs Tab -->
                @if (activeTab == "logs")
                {
                    <div class="card logs-tab-card">
                        <div class="card-header d-flex justify-content-between align-items-center py-2">
                            <h6 class="card-title mb-0">
                                Request Logs
                                <small class="text-muted ms-2">Real-time monitoring</small>
                            </h6>
                            <div>
                                <button class="btn btn-warning btn-sm me-2" @onclick="ClearLogs">
                                    <i class="bi bi-trash"></i> Clear Logs
                                </button>
                                <button class="btn btn-primary btn-sm" @onclick="RefreshLogs">
                                    <i class="bi bi-arrow-clockwise"></i> Refresh
                                </button>
                            </div>
                        </div>
                        <div class="card-body p-2">
                            @if (requestLogs.Any())
                            {
                                <div class="mb-2">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="input-group input-group-sm">
                                                <span class="input-group-text">
                                                    <i class="bi bi-search"></i>
                                                </span>
                                                <input type="text" 
                                                       class="form-control" 
                                                       placeholder="Search logs by method, path, status, or IP..." 
                                                       @bind="logSearchTerm" 
                                                       @oninput="OnLogSearchInput" />
                                                @if (!string.IsNullOrWhiteSpace(logSearchTerm))
                                                {
                                                    <button class="btn btn-outline-secondary" type="button" @onclick="ClearLogSearch">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                        <div class="col-md-6 d-flex align-items-center">
                                            @{
                                                var filteredLogs = GetFilteredLogs();
                                            }
                                            <small class="text-muted">
                                                @if (!string.IsNullOrWhiteSpace(logSearchTerm))
                                                {
                                                    <text>Showing @filteredLogs.Count of @requestLogs.Count entries</text>
                                                }
                                                else
                                                {
                                                    <text>@requestLogs.Count total entries</text>
                                                }
                                            </small>
                                        </div>
                                    </div>
                                </div>

                                <div class="logs-container" id="logsContainer">
                                    @foreach (var log in filteredLogs.Take(100))
                                    {
                                        <div class="log-entry card mb-1 @(log.IsMatchedByMock ? "border-success" : "border-warning")">
                                            <div class="card-body p-2">
                                                <div class="d-flex justify-content-between align-items-start mb-1">
                                                    <div class="d-flex align-items-center flex-wrap">
                                                        <span class="badge bg-@GetMethodBadgeColor(log.Method) me-1">@log.Method</span>
                                                        <code class="me-1 small">@log.Path@(string.IsNullOrEmpty(log.QueryString) ? "" : log.QueryString)</code>
                                                        <span class="badge bg-@GetStatusBadgeColor(log.StatusCode) me-1">@log.StatusCode</span>
                                                        @if (log.IsMatchedByMock)
                                                        {
                                                            <span class="badge bg-success me-1" title="Matched by mock">
                                                                <i class="bi bi-check-circle"></i> Mock
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-warning me-1" title="No mock matched">
                                                                <i class="bi bi-exclamation-triangle"></i> Passthrough
                                                            </span>
                                                        }
                                                    </div>
                                                    <div class="text-end">
                                                        <small class="text-muted d-block">@log.Timestamp.ToString("HH:mm:ss.fff")</small>
                                                        <small class="text-muted">@log.ResponseTimeMs ms</small>
                                                    </div>
                                                </div>
                                                
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <strong>Request Details:</strong>
                                                        <div class="small mt-1">
                                                            <div><strong>Client IP:</strong> @log.ClientIp</div>
                                                            @if (!string.IsNullOrEmpty(log.UserAgent))
                                                            {
                                                                <div><strong>User Agent:</strong> <span class="text-truncate d-inline-block" style="max-width: 300px;" title="@log.UserAgent">@log.UserAgent</span></div>
                                                            }
                                                            @if (log.Headers.Any())
                                                            {
                                                                <details class="mt-1">
                                                                    <summary><strong>Headers (@log.Headers.Count)</strong></summary>
                                                                    <div class="mt-1 ms-3">
                                                                        @foreach (var header in log.Headers.Take(10))
                                                                        {
                                                                            <div class="font-monospace small">@header.Key: @header.Value</div>
                                                                        }
                                                                        @if (log.Headers.Count > 10)
                                                                        {
                                                                            <div class="text-muted small">... and @(log.Headers.Count - 10) more</div>
                                                                        }
                                                                    </div>
                                                                </details>
                                                            }
                                                            @if (!string.IsNullOrEmpty(log.RequestBody))
                                                            {
                                                                <details class="mt-1">
                                                                    <summary><strong>Request Body</strong></summary>
                                                                    <pre class="mt-1 p-2 bg-light small" style="max-height: 200px; overflow-y: auto;"><code>@log.RequestBody</code></pre>
                                                                </details>
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <strong>Response Details:</strong>
                                                        <div class="small mt-1">
                                                            @if (log.ResponseHeaders.Any())
                                                            {
                                                                <details>
                                                                    <summary><strong>Response Headers (@log.ResponseHeaders.Count)</strong></summary>
                                                                    <div class="mt-1 ms-3">
                                                                        @foreach (var header in log.ResponseHeaders.Take(10))
                                                                        {
                                                                            <div class="font-monospace small">@header.Key: @header.Value</div>
                                                                        }
                                                                        @if (log.ResponseHeaders.Count > 10)
                                                                        {
                                                                            <div class="text-muted small">... and @(log.ResponseHeaders.Count - 10) more</div>
                                                                        }
                                                                    </div>
                                                                </details>
                                                            }
                                                            @if (!string.IsNullOrEmpty(log.ResponseBody))
                                                            {
                                                                <details class="mt-1">
                                                                    <summary><strong>Response Body</strong></summary>
                                                                    <pre class="mt-1 p-2 bg-light small" style="max-height: 200px; overflow-y: auto;"><code>@log.ResponseBody</code></pre>
                                                                </details>
                                                            }
                                                            @if (!string.IsNullOrEmpty(log.MockFileName))
                                                            {
                                                                <div class="mt-1"><strong>Mock File:</strong> <code>@log.MockFileName</code></div>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>

                                @if (filteredLogs.Count > 100)
                                {
                                    <div class="alert alert-info mt-3">
                                        <i class="bi bi-info-circle"></i>
                                        Showing first 100 entries of @filteredLogs.Count total. Use search to filter or clear old logs for better performance.
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    <h6><i class="bi bi-info-circle"></i> No request logs yet</h6>
                                    <p class="mb-0">Make some requests to your mock API endpoints to see the logs here. All incoming requests will be captured and displayed in real-time.</p>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit File Modal -->
@if (showFileModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (isEditMode)
                        {
                            <i class="bi bi-pencil"></i> <text>Edit Mock File: @currentFileName</text>
                        }
                        else
                        {
                            <i class="bi bi-plus-circle"></i> <text>Create New Mock File</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseFileModal"></button>
                </div>
                <div class="modal-body">
                    <form @onsubmit:preventDefault="true">
                        @if (!isEditMode)
                        {
                            <div class="mb-3">
                                <label class="form-label">File Name</label>
                                <div class="input-group">
                                    <input type="text" 
                                           class="form-control @((!string.IsNullOrWhiteSpace(currentFileName) && !IsValidFileName(currentFileName)) ? "is-invalid" : "")" 
                                           @bind="currentFileName" 
                                           @oninput="OnFileNameInput" 
                                           placeholder="My File Name" />
                                    <span class="input-group-text">.json</span>
                                </div>
                                <div class="form-text">
                                    Use descriptive names like 'Get Users', 'Post Login', etc. 
                                    Names will be automatically converted to lowercase with dashes (e.g., my-file-name.json).
                                </div>
                                @if (!string.IsNullOrWhiteSpace(currentFileName))
                                {
                                    @if (IsValidFileName(currentFileName))
                                    {
                                        <div class="mt-2">
                                            <small class="text-success">
                                                <i class="bi bi-check-circle"></i> Final filename: <strong>@GetFinalFileName(currentFileName)</strong>
                                            </small>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="mt-2">
                                            <small class="text-danger">
                                                <i class="bi bi-exclamation-triangle"></i> Invalid filename - avoid special characters and reserved names
                                            </small>
                                        </div>
                                    }
                                }
                            </div>
                        }
                        
                        <div class="mb-3">
                            <label class="form-label">JSON Content</label>
                            <textarea class="form-control font-monospace" 
                                      @bind="currentFileContent" 
                                      rows="20" 
                                      placeholder="Enter JSON mock definition..."></textarea>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(validationError))
                        {
                            <div class="alert alert-danger">
                                <i class="bi bi-exclamation-triangle"></i>
                                <strong>Validation Error:</strong> @validationError
                            </div>
                        }
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseFileModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveFile" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="bi bi-save"></i> Save
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-trash text-danger"></i> Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the file <strong>@fileToDelete</strong>?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteFile" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Sample Request Modal -->
@if (showSampleRequestModal && selectedMockForSample != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-code-slash text-info"></i> Sample Request for 
                        <span class="badge bg-@GetMethodBadgeColor(selectedMockForSample.Method) me-1">@selectedMockForSample.Method</span>
                        <code>@selectedMockForSample.Path</code>
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseSampleRequestModal"></button>
                </div>
                <div class="modal-body">
                    <!-- Tab Navigation -->
                    <ul class="nav nav-tabs" id="sampleRequestTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeSampleTab == "curl" ? "active" : "")" 
                                    @onclick='() => SetActiveSampleTab("curl")' 
                                    type="button">
                                <i class="bi bi-terminal"></i> cURL
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeSampleTab == "javascript" ? "active" : "")" 
                                    @onclick='() => SetActiveSampleTab("javascript")' 
                                    type="button">
                                <i class="bi bi-braces"></i> JavaScript
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeSampleTab == "csharp" ? "active" : "")" 
                                    @onclick='() => SetActiveSampleTab("csharp")' 
                                    type="button">
                                <i class="bi bi-code-square"></i> C#
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeSampleTab == "raw" ? "active" : "")" 
                                    @onclick='() => SetActiveSampleTab("raw")' 
                                    type="button">
                                <i class="bi bi-file-text"></i> Raw HTTP
                            </button>
                        </li>
                    </ul>

                    <!-- Tab Content -->
                    <div class="tab-content mt-3">
                        @if (activeSampleTab == "curl")
                        {
                            <div class="tab-pane active">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6>cURL Command</h6>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => CopyToClipboard(currentCurlCommand)">
                                        <i class="bi bi-clipboard"></i> Copy
                                    </button>
                                </div>
                                <pre class="bg-dark text-light p-3 rounded"><code>@currentCurlCommand</code></pre>
                                <small class="text-muted">Copy and paste this command into your terminal to test the endpoint.</small>
                            </div>
                        }
                        else if (activeSampleTab == "javascript")
                        {
                            <div class="tab-pane active">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6>JavaScript Fetch</h6>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => CopyToClipboard(currentJavaScriptCode)">
                                        <i class="bi bi-clipboard"></i> Copy
                                    </button>
                                </div>
                                <pre class="bg-dark text-light p-3 rounded"><code>@currentJavaScriptCode</code></pre>
                                <small class="text-muted">Use this in your browser console or JavaScript application.</small>
                            </div>
                        }
                        else if (activeSampleTab == "csharp")
                        {
                            <div class="tab-pane active">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6>C# HttpClient</h6>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => CopyToClipboard(currentCSharpCode)">
                                        <i class="bi bi-clipboard"></i> Copy
                                    </button>
                                </div>
                                <pre class="bg-dark text-light p-3 rounded"><code>@currentCSharpCode</code></pre>
                                <small class="text-muted">Use this in your .NET application with HttpClient.</small>
                            </div>
                        }
                        else if (activeSampleTab == "raw")
                        {
                            <div class="tab-pane active">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6>Raw HTTP Request</h6>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => CopyToClipboard(currentRawHttp)">
                                        <i class="bi bi-clipboard"></i> Copy
                                    </button>
                                </div>
                                <pre class="bg-dark text-light p-3 rounded"><code>@currentRawHttp</code></pre>
                                <small class="text-muted">Raw HTTP request format for use with any HTTP client.</small>
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSampleRequestModal">Close</button>
                    @if (!selectedMockForSample.HasWildcards)
                    {
                        <a href="@selectedMockForSample.Path" target="_blank" class="btn btn-primary">
                            <i class="bi bi-box-arrow-up-right"></i> Test in Browser
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<MockApiDefinition> mockDefinitions = new();
    private List<MockFileInfo> mockFiles = new();
    private DateTime lastUpdated = DateTime.Now;
    private bool isAutoRefreshEnabled = true;
    private bool isRefreshing = false;
    private bool isComponentDisposed = false;
    private string activeTab = "endpoints";

    // File management
    private bool showFileModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private bool isDeleting = false;
    private string currentFileName = "";
    private string currentFileContent = "";
    private string fileToDelete = "";
    private string validationError = "";

    // Sorting state
    private string currentSortColumn = "path";
    private bool isAscending = true;

    // Search state
    private string endpointSearchTerm = "";
    private string fileSearchTerm = "";
    private string logSearchTerm = "";

    // Logs state
    private List<RequestLogEntry> requestLogs = new();

    // Sample request state
    private bool showSampleRequestModal = false;
    private MockApiDefinition? selectedMockForSample = null;
    private string activeSampleTab = "curl";
    private string currentCurlCommand = "";
    private string currentJavaScriptCode = "";
    private string currentCSharpCode = "";
    private string currentRawHttp = "";

    protected override async Task OnInitializedAsync()
    {
        MockApiService.MockDefinitionsChanged += OnMockDefinitionsChanged;
        RequestLogService.LogsChanged += OnLogsChanged;
        await RefreshMockDefinitionsAsync();
        await RefreshMockFilesAsync();
        RefreshLogs();
    }

    private async void OnMockDefinitionsChanged()
    {
        if (!isComponentDisposed && isAutoRefreshEnabled)
        {
            try
            {
                await InvokeAsync(async () =>
                {
                    await RefreshMockDefinitionsAsync();
                    await RefreshMockFilesAsync();
                    StateHasChanged();
                });
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error handling mock definitions changed event");
            }
        }
    }

    private async void OnLogsChanged()
    {
        if (!isComponentDisposed)
        {
            try
            {
                await InvokeAsync(() =>
                {
                    RefreshLogs();
                    StateHasChanged();
                });
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error handling logs changed event");
            }
        }
    }

    private void RefreshLogs()
    {
        requestLogs = RequestLogService.GetLogs();
    }

    private void ClearLogs()
    {
        RequestLogService.ClearLogs();
        RefreshLogs();
        StateHasChanged();
    }

    private async Task RefreshMockDefinitionsAsync()
    {
        if (isRefreshing) return;
        
        try
        {
            isRefreshing = true;
            StateHasChanged();
            await Task.Delay(100);
            
            mockDefinitions = MockApiService.GetAllMockDefinitions().ToList();
            lastUpdated = DateTime.Now;
            Logger.LogInformation("Refreshed mock definitions, found {Count} definitions", mockDefinitions.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing mock definitions");
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task RefreshMockFilesAsync()
    {
        try
        {
            mockFiles = await MockFileService.GetAllMockFilesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing mock files");
        }
    }

    private async Task RefreshMockDefinitions()
    {
        await RefreshMockDefinitionsAsync();
        await RefreshMockFilesAsync();
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private void ToggleAutoRefresh()
    {
        isAutoRefreshEnabled = !isAutoRefreshEnabled;
        Logger.LogInformation("Auto-refresh {Status}", isAutoRefreshEnabled ? "enabled" : "disabled");
        StateHasChanged();
    }

    // File Management Methods
    private void ShowCreateFileModal()
    {
        isEditMode = false;
        currentFileName = "";
        currentFileContent = MockFileService.GetDefaultMockTemplate();
        validationError = "";
        showFileModal = true;
        StateHasChanged();
    }

    private void CloseFileModal()
    {
        showFileModal = false;
        currentFileName = "";
        currentFileContent = "";
        validationError = "";
        StateHasChanged();
    }

    private async Task SaveFile()
    {
        if (string.IsNullOrWhiteSpace(currentFileName))
        {
            validationError = "File name is required.";
            return;
        }

        if (!IsValidFileName(currentFileName))
        {
            validationError = "Invalid file name. Please avoid special characters and reserved names.";
            return;
        }

        if (string.IsNullOrWhiteSpace(currentFileContent))
        {
            validationError = "File content is required.";
            return;
        }

        var fileName = GetFinalFileName(currentFileName);

        try
        {
            isSaving = true;
            validationError = "";
            StateHasChanged();

            var success = await MockFileService.SaveMockFileAsync(fileName, currentFileContent);
            if (success)
            {
                await RefreshMockDefinitionsAsync();
                await RefreshMockFilesAsync();
                CloseFileModal();
            }
            else
            {
                validationError = "Failed to save file. Please check the JSON format and try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving file: {FileName}", fileName);
            validationError = $"Error saving file: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task EditFile(string fileName)
    {
        try
        {
            var fileInfo = await MockFileService.GetMockFileAsync(fileName);
            if (fileInfo != null)
            {
                isEditMode = true;
                currentFileName = fileName;
                currentFileContent = fileInfo.Content;
                validationError = "";
                showFileModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading file for editing: {FileName}", fileName);
        }
    }

    private void ShowDeleteConfirm(string fileName)
    {
        fileToDelete = fileName;
        showDeleteModal = true;
        StateHasChanged();
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        fileToDelete = "";
        StateHasChanged();
    }

    private async Task DeleteFile()
    {
        try
        {
            isDeleting = true;
            StateHasChanged();

            var success = await MockFileService.DeleteMockFileAsync(fileToDelete);
            if (success)
            {
                await RefreshMockDefinitionsAsync();
                await RefreshMockFilesAsync();
                CloseDeleteModal();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting file: {FileName}", fileToDelete);
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }

    // Endpoint sorting and filtering methods
    private List<MockApiDefinition> GetSortedEndpoints()
    {
        var filtered = mockDefinitions.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(endpointSearchTerm))
        {
            var searchTerm = endpointSearchTerm.ToLowerInvariant();
            filtered = filtered.Where(e => 
                e.Path.ToLowerInvariant().Contains(searchTerm) ||
                e.Method.ToLowerInvariant().Contains(searchTerm) ||
                (e.ContentType?.ToLowerInvariant().Contains(searchTerm) ?? false) ||
                e.StatusCode.ToString().Contains(searchTerm)
            );
        }

        var sorted = filtered;

        sorted = currentSortColumn switch
        {
            "method" => isAscending ? sorted.OrderBy(e => e.Method) : sorted.OrderByDescending(e => e.Method),
            "path" => isAscending ? sorted.OrderBy(e => e.Path) : sorted.OrderByDescending(e => e.Path),
            "statusCode" => isAscending ? sorted.OrderBy(e => e.StatusCode) : sorted.OrderByDescending(e => e.StatusCode),
            "contentType" => isAscending ? sorted.OrderBy(e => e.ContentType ?? "application/json") : sorted.OrderByDescending(e => e.ContentType ?? "application/json"),
            "delay" => isAscending ? sorted.OrderBy(e => e.DelayMs) : sorted.OrderByDescending(e => e.DelayMs),
            "headers" => isAscending ? sorted.OrderBy(e => e.ResponseHeaders.Count) : sorted.OrderByDescending(e => e.ResponseHeaders.Count),
            _ => sorted.OrderBy(e => e.Path)
        };

        return sorted.ToList();
    }

    private List<MockFileInfo> GetFilteredFiles()
    {
        var filtered = mockFiles.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(fileSearchTerm))
        {
            var searchTerm = fileSearchTerm.ToLowerInvariant();
            filtered = filtered.Where(f => 
                f.FileName.ToLowerInvariant().Contains(searchTerm) ||
                (f.MockDefinition?.Path.ToLowerInvariant().Contains(searchTerm) ?? false) ||
                (f.MockDefinition?.Method.ToLowerInvariant().Contains(searchTerm) ?? false)
            );
        }

        return filtered.OrderBy(f => f.FileName).ToList();
    }

    private List<RequestLogEntry> GetFilteredLogs()
    {
        var filtered = requestLogs.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(logSearchTerm))
        {
            var searchTerm = logSearchTerm.ToLowerInvariant();
            filtered = filtered.Where(l => 
                l.Method.ToLowerInvariant().Contains(searchTerm) ||
                l.Path.ToLowerInvariant().Contains(searchTerm) ||
                l.StatusCode.ToString().Contains(searchTerm) ||
                l.ClientIp.ToLowerInvariant().Contains(searchTerm) ||
                (l.UserAgent?.ToLowerInvariant().Contains(searchTerm) ?? false) ||
                (l.MockFileName?.ToLowerInvariant().Contains(searchTerm) ?? false)
            );
        }

        return filtered.ToList();
    }

    private void SortEndpoints(string column)
    {
        if (currentSortColumn == column)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = column;
            isAscending = true;
        }
        StateHasChanged();
    }

    // Search helper methods
    private void OnEndpointSearchInput(ChangeEventArgs e)
    {
        endpointSearchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private void OnFileSearchInput(ChangeEventArgs e)
    {
        fileSearchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private void OnLogSearchInput(ChangeEventArgs e)
    {
        logSearchTerm = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private void ClearEndpointSearch()
    {
        endpointSearchTerm = "";
        StateHasChanged();
    }

    private void ClearFileSearch()
    {
        fileSearchTerm = "";
        StateHasChanged();
    }

    private void ClearLogSearch()
    {
        logSearchTerm = "";
        StateHasChanged();
    }

    // Sample Request Methods
    private void ShowSampleRequestModal(MockApiDefinition mock)
    {
        selectedMockForSample = mock;
        activeSampleTab = "curl";
        GenerateSampleRequests();
        showSampleRequestModal = true;
        StateHasChanged();
    }

    private void CloseSampleRequestModal()
    {
        showSampleRequestModal = false;
        selectedMockForSample = null;
        StateHasChanged();
    }

    private void SetActiveSampleTab(string tab)
    {
        activeSampleTab = tab;
        StateHasChanged();
    }

    private void GenerateSampleRequests()
    {
        if (selectedMockForSample == null) return;

        try
        {
            var baseUrl = "http://localhost:5000";
            
            currentCurlCommand = RequestGeneratorService.GenerateCurlCommand(selectedMockForSample, baseUrl);
            currentJavaScriptCode = RequestGeneratorService.GenerateJavaScriptFetch(selectedMockForSample, baseUrl);
            currentCSharpCode = RequestGeneratorService.GenerateCSharpHttpClient(selectedMockForSample, baseUrl);
            currentRawHttp = GenerateRawHttp(selectedMockForSample, baseUrl);
            
            // Debug: Log what was generated for troubleshooting
            Logger.LogInformation("Generated sample request for {Method} {Path}. Body preview: {Body}", 
                selectedMockForSample.Method, 
                selectedMockForSample.Path, 
                currentCurlCommand.Contains("-d '") ? 
                    currentCurlCommand.Substring(currentCurlCommand.IndexOf("-d '") + 4).Split('\'')[0] : 
                    "No body");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating sample requests for {Method} {Path}", selectedMockForSample?.Method, selectedMockForSample?.Path);
        }
    }

    private string GenerateRawHttp(MockApiDefinition mock, string baseUrl)
    {
        var sampleRequest = RequestGeneratorService.GenerateSampleRequest(mock, baseUrl);
        var uri = new Uri(sampleRequest.Url);
        
        var rawHttp = $"{mock.Method} {uri.PathAndQuery} HTTP/1.1\n";
        rawHttp += $"Host: {uri.Host}:{uri.Port}\n";
        
        foreach (var header in sampleRequest.Headers)
        {
            rawHttp += $"{header.Key}: {header.Value}\n";
        }
        
        if (!string.IsNullOrEmpty(sampleRequest.Body))
        {
            rawHttp += $"Content-Length: {System.Text.Encoding.UTF8.GetByteCount(sampleRequest.Body)}\n";
            rawHttp += "\n";
            rawHttp += sampleRequest.Body;
        }
        
        return rawHttp;
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error copying to clipboard");
        }
    }

    // Utility Methods
    private string GetMethodBadgeColor(string method) => method.ToUpper() switch
    {
        "GET" => "primary",
        "POST" => "success",
        "PUT" => "warning",
        "DELETE" => "danger",
        "PATCH" => "info",
        _ => "secondary"
    };

    private string GetStatusBadgeColor(int statusCode) => statusCode switch
    {
        >= 200 and < 300 => "success",
        >= 300 and < 400 => "info",
        >= 400 and < 500 => "warning",
        >= 500 => "danger",
        _ => "secondary"
    };

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        return $"{bytes / (1024 * 1024):F1} MB";
    }

    // Filename helper methods
    private void OnFileNameInput(ChangeEventArgs e)
    {
        currentFileName = e.Value?.ToString() ?? "";
        StateHasChanged();
    }

    private string GetFinalFileName(string fileName)
    {
        if (string.IsNullOrWhiteSpace(fileName))
            return "";
            
        var cleanFileName = fileName.Trim();
        var kebabCase = ConvertToKebabCase(cleanFileName);
        
        if (!kebabCase.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
        {
            return $"{kebabCase}.json";
        }
        return kebabCase;
    }

    private string ConvertToKebabCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return "";

        var hasJsonExtension = input.EndsWith(".json", StringComparison.OrdinalIgnoreCase);
        var nameWithoutExtension = hasJsonExtension ? 
            input.Substring(0, input.Length - 5) : input;

        var result = nameWithoutExtension
            .ToLowerInvariant()
            .Replace(" ", "-")
            .Replace("_", "-")
            .Replace(".", "-")
            .Replace("--", "-")
            .Replace("---", "-");

        result = new string(result.Where(c => char.IsLetterOrDigit(c) || c == '-').ToArray());
        result = System.Text.RegularExpressions.Regex.Replace(result, @"-+", "-").Trim('-');

        if (hasJsonExtension)
        {
            result += ".json";
        }

        return result;
    }

    private bool IsValidFileName(string fileName)
    {
        if (string.IsNullOrWhiteSpace(fileName))
            return false;

        var cleanFileName = fileName.Trim();
        var invalidChars = Path.GetInvalidFileNameChars();
        if (cleanFileName.Any(c => invalidChars.Contains(c)))
            return false;

        var reservedNames = new[] { "CON", "PRN", "AUX", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9" };
        var nameWithoutExtension = Path.GetFileNameWithoutExtension(cleanFileName.EndsWith(".json", StringComparison.OrdinalIgnoreCase) ? cleanFileName : $"{cleanFileName}.json");
        if (reservedNames.Contains(nameWithoutExtension.ToUpper()))
            return false;

        return true;
    }

    public void Dispose()
    {
        isComponentDisposed = true;
        MockApiService.MockDefinitionsChanged -= OnMockDefinitionsChanged;
        RequestLogService.LogsChanged -= OnLogsChanged;
    }
}